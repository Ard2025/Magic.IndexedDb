@page "/"
@using Magic.IndexedDb
@using TestWasm.Models

@inject IMagicDbFactory _MagicDb

@{
    string storageQuotaText;
    string storageUsageText;
    if (storageQuota >= 1024)
    {
        storageQuota = storageQuota / 1024.0;
        // Round the value to two decimal places
        storageQuota = Math.Round(storageQuota, 2);
        // Display the value in GB
        storageQuotaText = $"{storageQuota} GB";
    }
    else
    {
        // Display the value in MB
        storageQuotaText = $"{Math.Round(storageQuota, 2)} MB";
    }

    if (storageUsage >= 1024)
    {
        storageUsage = storageUsage / 1024.0;
        // Round the value to two decimal places
        storageUsage = Math.Round(storageUsage, 2);
        // Display the value in GB
        storageUsageText = $"{storageUsage} GB";
    }
    else
    {
        // Display the value in MB
        storageUsageText = $"{Math.Round(storageUsage, 2)} MB";
    }

    // Display the storage size on the front-end
    <p>Storage Used: @storageUsageText</p>
    <p>Storage Quota: @storageQuotaText</p>

}

<PageTitle>Example</PageTitle>

<h3>People In IndexedDb!</h3>

<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Age</th>
            <th>DecryptedSecret</th>
            <th>Encrypted Secret</th>
            <th>Access</th>
        </tr>
    </thead>
    <tbody>
        @foreach (Person person in allPeople)
        {
            <tr>
                <td>@person._Id</td>
                <td>@person.Name</td>
                <td>@person._Age</td>
                <td>
                    <div style="max-width: 400px; overflow-x: auto;">
                        @person.SecretDecrypted
                    </div>
                </td>
                <td>
                    <div style="max-width: 200px; overflow-x: auto;">
                        @person.Secret
                    </div>
                </td>
                <td>@person.Access</td>
            </tr>
        }
    </tbody>
</table>

<br />
<br />
<h3>Complex query capabilities!</h3>
<pre>
<code>
<span style="color: #2A56C6;">await</span> manager.<span style="color: #2A56C6;">Where</span><span style="color: #A31515;">&lt;Person&gt;</span>(x =&gt; x.Name.<span style="color: #2A56C6;">StartsWith</span>(<span style="color: #A31515;">"c"</span>, <span style="color: #2A56C6;">StringComparison</span>.<span style="color: #2A56C6;">OrdinalIgnoreCase</span>)
<span style="color: #2A56C6;">||</span> x.Name.<span style="color: #2A56C6;">StartsWith</span>(<span style="color: #A31515;">"l"</span>, <span style="color: #2A56C6;">StringComparison</span>.<span style="color: #2A56C6;">OrdinalIgnoreCase</span>)
<span style="color: #2A56C6;">||</span> x.Name.<span style="color: #2A56C6;">StartsWith</span>(<span style="color: #A31515;">"j"</span>, <span style="color: #2A56C6;">StringComparison</span>.<span style="color: #2A56C6;">OrdinalIgnoreCase</span>) <span style="color: #2A56C6;">&amp;&amp;</span> x._Age <span style="color: #2A56C6;">&gt;</span> <span style="color: #2A56C6;">35</span>
                    ).<span style="color: #2A56C6;">OrderBy</span>(x =&gt; x._Id).<span style="color: #2A56C6;">Skip</span>(<span style="color: #2A56C6;">1</span>).<span style="color: #2A56C6;">Execute</span>();
</code>
</pre>

@foreach (Person person in WhereExample)
{
    <p><b>Name:</b> @person.Name - <b>Age:</b> @person._Age</p>
}

@code {
    private List<Person> allPeople { get; set; } = new List<Person>();
    private IEnumerable<Person> WhereExample { get; set; } = Enumerable.Empty<Person>();
    private double storageQuota { get; set; }
    private double storageUsage { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var manager = await _MagicDb.GetDbManagerAsync(DbNames.Client);

                await manager.ClearTableAsync<Person>();

                if (!(await manager.GetAllAsync<Person>()).Any())
                {
                    Person[] persons = new Person[] {
                        new Person { Name = "Zack", TestInt = 9, _Age = 45, GUIY = Guid.NewGuid(), Secret = "I buried treasure behind my house", Access=Person.Permissions.CanRead},
                        new Person { Name = "Luna", TestInt = 9, _Age = 35, GUIY = Guid.NewGuid(), Secret = "Jerry is my husband and I had an affair with Bob.", Access = Person.Permissions.CanRead|Person.Permissions.CanWrite},
                        new Person { Name = "Jerry", TestInt = 9, _Age = 35, GUIY = Guid.NewGuid(), Secret = "My wife is amazing", Access = Person.Permissions.CanRead|Person.Permissions.CanWrite|Person.Permissions.CanCreate},
                        new Person { Name = "Jon", TestInt = 9, _Age = 37, GUIY = Guid.NewGuid(), Secret = "I black mail Luna for money because I know her secret", Access = Person.Permissions.CanRead},
                        new Person { Name = "Jack", TestInt = 9, _Age = 37, GUIY = Guid.NewGuid(), Secret = "I have a drug problem", Access = Person.Permissions.CanRead|Person.Permissions.CanWrite},
                        new Person { Name = "Cathy", TestInt = 9, _Age = 22, GUIY = Guid.NewGuid(), Secret = "I got away with reading Bobs diary.", Access = Person.Permissions.CanRead | Person.Permissions.CanWrite},
                        new Person { Name = "Bob", TestInt = 3 , _Age = 69, GUIY = Guid.NewGuid(), Secret = "I caught Cathy reading my diary, but I'm too shy to confront her.", Access = Person.Permissions.CanRead },
                        new Person { Name = "Alex", TestInt = 3 , _Age = 80, GUIY = Guid.NewGuid(), Secret = "I'm naked! But nobody can know!" }
                };
                    await manager.AddRangeAsync(persons);
                }

                var storageInfo = await manager.GetStorageEstimateAsync();
                storageQuota = storageInfo.QuotaInMegabytes;
                storageUsage = storageInfo.UsageInMegabytes;

                var allPeopleDecrypted = await manager.GetAllAsync<Person>();
                foreach (Person person in allPeopleDecrypted)
                {
                    person.SecretDecrypted = await manager.DecryptAsync(person.Secret);
                    allPeople.Add(person);
                }

                WhereExample = await manager.Where<Person>(x => x.Name.StartsWith("c", StringComparison.OrdinalIgnoreCase)
                || x.Name.StartsWith("l", StringComparison.OrdinalIgnoreCase)
                || x.Name.StartsWith("j", StringComparison.OrdinalIgnoreCase) && x._Age > 35
                ).OrderBy(x => x._Id).Skip(1).Execute();

                /*
                 * Still working on allowing nested
                 */
                //// Should return "Zack"
                //var NestedResult = await manager.Where<Person>(p => (p.Name == "Zack" || p.Name == "Luna") && (p._Age >= 35 && p._Age <= 45)).Execute();

                //// should return "Luna", "Jerry" and "Jon"
                //var NonNestedResult = await manager.Where<Person>(p => p.TestInt == 9 && p._Age >= 35 && p._Age <= 45).Execute();
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }
}